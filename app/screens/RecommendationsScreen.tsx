import { FC, useState, useEffect } from "react"
import { Alert, ViewStyle, TextStyle } from "react-native"
import { useNavigation } from "@react-navigation/native"
import { NativeStackNavigationProp } from "@react-navigation/native-stack"

import { Button, Header, Screen, Text } from "@/components"
import { AppStackParamList, AppStackScreenProps } from "@/navigators"
import { eventService } from "@/services/eventService"
import { Causas } from "types"

type Priority = "high" | "medium" | "low"
type RecommendationsNavigationProp = NativeStackNavigationProp<AppStackParamList, "Recommendations">

interface Recommendation {
  title: string
  description: string
  icon: string
  priority: Priority
}

interface RecommendationsScreenProps extends AppStackScreenProps<"Recommendations"> {}

export const RecommendationsScreen: FC<RecommendationsScreenProps> = ({ route }) => {
  const navigation = useNavigation<RecommendationsNavigationProp>()
  const { eventId } = route.params
  const actualEventId = eventId // Este √© obrigat√≥rio na navega√ß√£o

  const [eventTitle, setEventTitle] = useState("")
  const [eventCausas, setEventCausas] = useState<Causas[]>([])
  const [recommendations, setRecommendations] = useState<Recommendation[]>([])

  useEffect(() => {
    const loadEventAndGenerateRecommendations = async () => {
      try {
        const event = await eventService.getEventById(actualEventId)
        if (event) {
          setEventTitle(event.title)
          setEventCausas(event.causas)
          
          // Gera recomenda√ß√µes baseadas nas causas do evento
          const generatedRecommendations = generateRecommendations(event.causas)
          setRecommendations(generatedRecommendations)
        }
      } catch (error) {
        console.error("Erro ao carregar evento:", error)
      }
    }
    loadEventAndGenerateRecommendations()
  }, [actualEventId])

  const generateRecommendations = (causas: Causas[]): Recommendation[] => {
    const allRecommendations: Record<Causas, Recommendation[]> = {
      "Chuva": [
        {
          title: "Kit de Emerg√™ncia",
          description: "Mantenha lanternas, velas, f√≥sforos e pilhas sempre dispon√≠veis em casa.",
          icon: "üî¶",
          priority: "high"
        },
        {
          title: "Prote√ß√£o de Equipamentos",
          description: "Use filtros de linha com protetor contra surtos para proteger aparelhos eletr√¥nicos.",
          icon: "‚ö°",
          priority: "high"
        },
        {
          title: "Alimentos e √Ågua",
          description: "Tenha √°gua pot√°vel e alimentos n√£o perec√≠veis para pelo menos 3 dias.",
          icon: "ü•´",
          priority: "medium"
        }
      ],
      "Vento": [
        {
          title: "Verifica√ß√£o da Rede El√©trica",
          description: "Reporte fios ca√≠dos ou postes danificados imediatamente √† concession√°ria.",
          icon: "‚ö†Ô∏è",
          priority: "high"
        },
        {
          title: "Seguran√ßa Dom√©stica",
          description: "Verifique telhados, antenas e estruturas que podem ser afetadas por ventos fortes.",
          icon: "üè†",
          priority: "medium"
        }
      ],
      "Deslizamento": [
        {
          title: "Evacua√ß√£o de Emerg√™ncia",
          description: "Tenha um plano de evacua√ß√£o e rotas alternativas mapeadas.",
          icon: "üö®",
          priority: "high"
        },
        {
          title: "Comunica√ß√£o",
          description: "Mantenha um r√°dio a pilha para receber informa√ß√µes de emerg√™ncia.",
          icon: "üìª",
          priority: "high"
        }
      ],
      "√Årvores": [
        {
          title: "Poda Preventiva",
          description: "Solicite poda de √°rvores pr√≥ximas √† rede el√©trica junto aos √≥rg√£os competentes.",
          icon: "üå≥",
          priority: "medium"
        },
        {
          title: "Monitoramento",
          description: "Observe √°rvores com sinais de doen√ßa ou instabilidade pr√≥ximas √† sua resid√™ncia.",
          icon: "üëÄ",
          priority: "medium"
        }
      ],
      "Infraestrutura": [
        {
          title: "Gerador de Emerg√™ncia",
          description: "Considere investir em um gerador para equipamentos essenciais (geladeira, freezer).",
          icon: "üîã",
          priority: "medium"
        },
        {
          title: "Backup de Dados",
          description: "Fa√ßa backup regular de documentos importantes e dados digitais.",
          icon: "üíæ",
          priority: "low"
        }
      ],
      "Outro": [
        {
          title: "Preparo Geral",
          description: "Mantenha-se informado sobre planos de conting√™ncia da sua regi√£o.",
          icon: "üìã",
          priority: "medium"
        }
      ],
      "Desconhecido": [
        {
          title: "Preparo Geral",
          description: "Como a causa √© desconhecida, prepare-se para diversos cen√°rios.",
          icon: "‚ùì",
          priority: "medium"
        }
      ]
    }

    // Recomenda√ß√µes gerais que sempre aparecem
    const generalRecommendations: Recommendation[] = [
      {
        title: "Contatos de Emerg√™ncia",
        description: "Tenha sempre √† m√£o os n√∫meros da concession√°ria de energia, bombeiros e defesa civil.",
        icon: "üìû",
        priority: "high"
      },
      {
        title: "Primeiros Socorros",
        description: "Mantenha um kit de primeiros socorros completo e saiba como us√°-lo.",
        icon: "üè•",
        priority: "medium"
      },
      {
        title: "Seguro Residencial",
        description: "Verifique se seu seguro cobre danos causados por falta de energia prolongada.",
        icon: "üõ°Ô∏è",
        priority: "low"
      }
    ]

    // Combina recomenda√ß√µes espec√≠ficas com gerais
    const specificRecommendations = causas.flatMap(causa => allRecommendations[causa] || [])
    const combinedRecommendations = [...specificRecommendations, ...generalRecommendations]

    // Remove duplicatas baseado no t√≠tulo
    const uniqueRecommendations = combinedRecommendations.filter(
      (rec, index, arr) => arr.findIndex(r => r.title === rec.title) === index
    )

    // Ordena por prioridade
    return uniqueRecommendations.sort((a, b) => {
      const priorityOrder = { high: 0, medium: 1, low: 2 }
      return priorityOrder[a.priority] - priorityOrder[b.priority]
    })
  }

  const getPriorityColor = (priority: "high" | "medium" | "low"): string => {
    switch (priority) {
      case "high": return "#FF3B30"
      case "medium": return "#FF9500"
      case "low": return "#007AFF"
    }
  }

  const getPriorityText = (priority: "high" | "medium" | "low"): string => {
    switch (priority) {
      case "high": return "Alta Prioridade"
      case "medium": return "M√©dia Prioridade"
      case "low": return "Baixa Prioridade"
    }
  }

  const handleBackToHome = () => {
    Alert.alert(
      "Registro Conclu√≠do",
      "Obrigado por registrar este evento! Suas informa√ß√µes ajudam a melhorar a prepara√ß√£o da comunidade para futuras emerg√™ncias.",
      [
        {
          text: "Voltar ao In√≠cio",
          onPress: () => navigation.navigate("Home")
        }
      ]
    )
  }

  return (
    <Screen style={$root} preset="scroll" safeAreaEdges={["top", "bottom"]}>
      <Header 
        title="Recomenda√ß√µes" 
        leftIcon="back"
        onLeftPress={() => navigation.goBack()}
      />
      
      <Text preset="heading" style={$title}>
        Recomenda√ß√µes de Seguran√ßa
      </Text>
      
      {!!eventTitle && (
        <Text style={$eventTitle}>
          Baseado no evento: {eventTitle}
        </Text>
      )}

      {eventCausas.length > 0 && (
        <Text style={$causasText}>
          Causas identificadas: {eventCausas.join(", ")}
        </Text>
      )}
      
      <Text style={$subtitle}>
        Siga estas recomenda√ß√µes para se preparar melhor para futuras emerg√™ncias
      </Text>

      {recommendations.map((rec, index) => (
        <Text key={`recommendation-${index}-${rec.title}`} style={[
          $recommendationCard,
          { borderLeftColor: getPriorityColor(rec.priority) }
        ]}>
          <Text style={$recommendationIcon}>{rec.icon}</Text>
          <Text style={$recommendationTitle}>{rec.title}</Text>
          <Text style={$recommendationDescription}>{rec.description}</Text>
          <Text style={[
            $recommendationPriority,
            { color: getPriorityColor(rec.priority) }
          ]}>
            {getPriorityText(rec.priority)}
          </Text>
        </Text>
      ))}

      <Text style={$importantNote}>
        ‚ö†Ô∏è <Text style={$importantNoteTitle}>Importante:</Text> Estas recomenda√ß√µes s√£o baseadas nas causas do evento reportado. Para orienta√ß√µes espec√≠ficas da sua regi√£o, consulte a Defesa Civil local.
      </Text>

      <Text style={$emergencyContacts}>
        üìû <Text style={$emergencyContactsTitle}>Contatos de Emerg√™ncia:</Text>
        {"\n"}‚Ä¢ Bombeiros: 193
        {"\n"}‚Ä¢ Defesa Civil: 199
        {"\n"}‚Ä¢ Pol√≠cia: 190
        {"\n"}‚Ä¢ SAMU: 192
      </Text>

      <Button
        text="Finalizar e Voltar ao In√≠cio"
        style={$finishButton}
        onPress={handleBackToHome}
      />
    </Screen>
  )
}

const $root: ViewStyle = {
  flex: 1,
}

const $title: ViewStyle = {
  marginBottom: 8,
  marginTop: 16,
}

const $eventTitle: TextStyle = {
  marginBottom: 8,
  fontWeight: "600",
}

const $causasText: TextStyle = {
  marginBottom: 16,
  fontStyle: "italic",
  color: "#666",
}

const $subtitle: TextStyle = {
  marginBottom: 24,
}

const $recommendationCard: ViewStyle = {
  marginBottom: 16,
  padding: 16,
  backgroundColor: "#f8f9fa",
  borderRadius: 12,
  borderLeftWidth: 4,
}

const $recommendationIcon: TextStyle = {
  fontSize: 24,
  marginBottom: 8,
}

const $recommendationTitle: TextStyle = {
  fontSize: 18,
  fontWeight: "600",
  marginBottom: 8,
}

const $recommendationDescription: TextStyle = {
  fontSize: 16,
  lineHeight: 24,
  marginBottom: 8,
  color: "#333",
}

const $recommendationPriority: TextStyle = {
  fontSize: 14,
  fontWeight: "600",
  textTransform: "uppercase",
}

const $importantNote: ViewStyle = {
  marginTop: 16,
  marginBottom: 16,
  padding: 16,
  backgroundColor: "#fff3cd",
  borderRadius: 8,
  borderWidth: 1,
  borderColor: "#ffeaa7",
}

const $importantNoteTitle: TextStyle = {
  fontWeight: "600",
}

const $emergencyContacts: ViewStyle = {
  marginBottom: 24,
  padding: 16,
  backgroundColor: "#d1ecf1",
  borderRadius: 8,
  borderWidth: 1,
  borderColor: "#bee5eb",
}

const $emergencyContactsTitle: TextStyle = {
  fontWeight: "600",
}

const $finishButton: ViewStyle = {
  marginBottom: 16,
}
